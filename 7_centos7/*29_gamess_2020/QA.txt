Q:
This script asks a few questions, depending on your computer system,
to set up compiler names, libraries, message passing libraries,
and so forth.
 
You can quit at any time by pressing control-C, and then <return>.
 
Please open a second window by logging into your target machine,
in case this script asks you to 'type' a command to learn something
about your system software situation.  All such extra questions will
use the word 'type' to indicate it is a command for the other window.
 
After the new window is open, please hit <return> to go on.

A:
enter

Q:
   GAMESS can compile on the following 32 bit or 64 bit machines:
cray-xt     - Cray's XT massively parallel system, running CNL
cray-xc     - Cray's XC massively parallel system (e.g., DoE Theta, DoD Onyx)
ibm64       - IBM, Power8 chip or newer, running AIX or Linux (e.g., DoE Summit, DoD Hokulea)
ibm-bg      - IBM Blue Gene (Q model), these are 64 bit systems
linux32     - Linux (any 32 bit distribution), for x86
linux64     - Linux (any 64 bit distribution), for x86_64, ia64, or arm64 chips,
              using gfortran, ifort, or perhaps PGI compilers.
mac64       - Apple Mac, any chip, running OS X 10.5 or newer
win64       - Windows 64-bit (Windows 10)
singularity - GAMESS Singularity container image
 
    type 'uname -a' to partially clarify your computer's flavor.
 
please enter your target machine name: 

A: 
Where is the GAMESS software on your system?
A typical response might be /u1/mike/gamess,
most probably the correct answer is /home/alireza/installationDocumentations/29_gamess_2020/SRCs/gamess-2020/gamess
 
GAMESS directory? [/home/alireza/installationDocumentations/29_gamess_2020/SRCs/gamess-2020/gamess] 

A: 
/opt/software/GAMESS-US/2020-foss-2020a


Q:
Setting up GAMESS compile and link for GMS_TARGET=linux64
GAMESS software is located at GMS_PATH=/opt/software/GAMESS-US/2020-foss-2020a
 
Please provide the name of the build locaation.
This may be the same location as the GAMESS directory.
 
GAMESS build directory? [/home/alireza/installationDocumentations/29_gamess_2020/SRCs/gamess-2020/gamess] 

A:
/opt/software/GAMESS-US/2020-foss-2020a

Q:
Please provide a version number for the GAMESS executable.
This will be used as the middle part of the binary's name,
for example: gamess.00.x

Version? [00] 

A: 
enter

Q: 
Linux offers many choices for FORTRAN compilers, including the GNU
compiler suite's free compiler 'gfortran', usually included in
any Linux distribution.  If gfortran is not installed, it can be
installed from your distribution media.
 
To check on installed GNU compilers, for RedHat/SUSE style Linux,
   type 'rpm -aq | grep gcc' for both languages,
and for Debian/Ubuntu style Linux, it takes two commands
   type 'dpkg -l | grep gcc'
   type 'dpkg -l | grep gfortran'
 
There are also other compilers (some commercial), namely Intel's 'ifort',
Portland Group's 'pgfortran', Pathscale's 'pathf90', AMD's 'AOCC',
and ARM's armflang.
The last four are not common, and aren't as well tested.
 
type 'which gfortran'  to look for GNU's gfortran   (a good choice),
type 'which ifort'     to look for Intel's compiler (a good choice),
type 'which pgfortran' to look for Portland Group's compiler,
type 'which pathf90'   to look for Pathscale's compiler.
type 'which aocc'      to look for AMD's compiler.
type 'which armflang'  to look for ARM compiler.
Please enter your choice of FORTRAN: 
A:
gfortran

Q: 

gfortran is very robust, so this is a wise choice.
 
Please type 'gfortran -dumpversion' or else 'gfortran -v' to
detect the version number of your gfortran.
This reply should be a string with at least two decimal points,
such as 4.9.4 or 6.3.0.
The reply may be labeled as a 'gcc' version,
but it is really your gfortran version.
 
Please enter only the first decimal place, such as 4.9: 

A: 
9.3

Q:
   Good, the newest gfortrans can compile REAL*16 data type.
   Please report any numerical issues you encounter.
hit <return> to continue to the math library setup.

A: enter

Q: 
Linux distributions do not include a standard math library.
 
There are several reasonable add-on library choices,
       MKL from Intel           for 32 or 64 bit Linux (very fast)
      ACML from AMD             for 32 or 64 bit Linux (free)
     LibFLAME from AMD          for 64 bit Linux (free)
     ATLAS from www.rpmfind.net for 32 or 64 bit Linux (free)
  PGI BLAS from Portland Group  for 32 or 64 bit Linux
     ArmPL from ARM             for 64 bit Linux
and one very unreasonable option, namely 'none', which will use
some slow FORTRAN routines supplied with GAMESS.  Choosing 'none'
will run MP2 jobs 2x slower, or CCSD(T) jobs 5x slower.
 
Some typical places (but not the only ones) to find math libraries are
Type 'ls /opt/intel/mkl'                 to look for MKL
Type 'ls /opt/intel/Compiler/mkl'        to look for MKL
Type 'ls /opt/intel/composerxe/mkl'      to look for MKL
Type 'echo $MKLROOT'                     to look for MKL
Type 'ls -d /opt/acml*'                  to look for ACML
Type 'ls -d /usr/local/acml*'            to look for ACML
Type 'ls /usr/lib64/atlas'               to look for Atlas
Type 'ls /opt/pgi/linux86-64/*/lib/*     to look for libblas.a from PGI
Type 'ls /opt/pgi/osx86-64/*/lib/*       to look for libblas.a from PGI
Type 'echo $ARMPL_DIR'                   to look for ArmPL
 
Enter your choice of 'mkl' or 'atlas' or 'acml' or 'libflame' or 'openblas' or 'pgiblas' or 'armpl' or 'none': 

A:
openblas

Q: 

Linux distributions do not include a standard math library.
 
There are several reasonable add-on library choices,
       MKL from Intel           for 32 or 64 bit Linux (very fast)
      ACML from AMD             for 32 or 64 bit Linux (free)
     LibFLAME from AMD          for 64 bit Linux (free)
     ATLAS from www.rpmfind.net for 32 or 64 bit Linux (free)
  PGI BLAS from Portland Group  for 32 or 64 bit Linux
     ArmPL from ARM             for 64 bit Linux
and one very unreasonable option, namely 'none', which will use
some slow FORTRAN routines supplied with GAMESS.  Choosing 'none'
will run MP2 jobs 2x slower, or CCSD(T) jobs 5x slower.
 
Some typical places (but not the only ones) to find math libraries are
Type 'ls /opt/intel/mkl'                 to look for MKL
Type 'ls /opt/intel/Compiler/mkl'        to look for MKL
Type 'ls /opt/intel/composerxe/mkl'      to look for MKL
Type 'echo $MKLROOT'                     to look for MKL
Type 'ls -d /opt/acml*'                  to look for ACML
Type 'ls -d /usr/local/acml*'            to look for ACML
Type 'ls /usr/lib64/atlas'               to look for Atlas
Type 'ls /opt/pgi/linux86-64/*/lib/*     to look for libblas.a from PGI
Type 'ls /opt/pgi/osx86-64/*/lib/*       to look for libblas.a from PGI
Type 'echo $ARMPL_DIR'                   to look for ArmPL
 
Enter your choice of 'mkl' or 'atlas' or 'acml' or 'libflame' or 'openblas' or 'pgiblas' or 'armpl' or 'none': openblas
Where is your libopenblas.a file located?
 
  **BOLT: /shared/math/openblas/0.2.20/amd-epyc-gnu-4.8.5-serial/lib
  **BOLT: /shared/math/openblas/0.3.0/amd-epyc-gnu-8.2.0-serial/lib
enter this full pathname: 

A:
/opt/software/OpenBLAS/0.3.9-GCC-9.3.0/lib/

Q: 
Math library 'openblas' will be taken from /opt/software/OpenBLAS/0.3.9-GCC-9.3.0/lib/
 
please hit <return> to compile the GAMESS source code activator 

A: 
enter

Q:

gfortran -o /opt/software/GAMESS-US/2020-foss-2020a/tools/actvte.x actvte.f
unset echo
Source code activator was successfully compiled.
 
please hit <return> to set up your network for Linux clusters.

A: 
enter

Q:
 
If you have a slow network, like Gigabit Ethernet (GE), or
if you have so few nodes you won't run extensively in parallel, or
if you have no MPI library installed, or
if you want a fail-safe compile/link and easy execution,
     choose 'sockets'
to use good old reliable standard TCP/IP networking.
 
If you have an expensive but fast network like Infiniband (IB), and
if you have an MPI library correctly installed,
     choose 'mpi'.
 
If you wish to use a combination of TCP/IP networking for small
messages and MPI for large messages in a 'mixed' fashion,
     choose 'mixed'.
 
communication library ('serial','sockets' or 'mpi' or 'mixed')? 

A: 
mpi

Q:
The MPI libraries which work well on linux64/Infiniband are
      Intel's MPI (impi)
      MPICH/MPICH2
      MVAPICH2
Other libraries may work, please see 'readme.ddi' for info.
The choices listed above will compile and link easily,
and are known to run correctly and efficiently.

Enter 'sockets' if you just changed your mind about trying MPI.

Enter MPI library (impi, mpich, mpich2, mvapich2, mpt, sockets): 

A: 












